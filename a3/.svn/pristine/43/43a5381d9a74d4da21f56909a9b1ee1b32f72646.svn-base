/* BEGIN A3 SETUP */
/*
 * File handles and file tables.
 * New for ASST3
 */

#include <types.h>
#include <kern/errno.h>
#include <kern/limits.h>
#include <kern/stat.h>
#include <kern/unistd.h>
#include <kern/fcntl.h>
#include <file.h>
#include <syscall.h>
#include <vnode.h>
#include <vfs.h>
#include <thread.h>
#include <current.h>
#include <synch.h>

/*** openfile functions ***/

/*
 * file_open
 * opens a file, places it in the filetable, sets RETFD to the file
 * descriptor. the pointer arguments must be kernel pointers.
 * NOTE -- the passed in filename must be a mutable string.
 * 
 * A3: As per the OS/161 man page for open(), you do not need 
 * to do anything with the "mode" argument.
 */
int
file_open(char *filename, int flags, int mode, int *retfd)
{
	struct vnode *v;	// A new vnode
	struct ofile *of;	// A new ofile
	int result;

	// Check if file is open
	result = vfs_open(filename, flags, mode, &v);
	if (result) {
		return result;
	}
	// Allocate memory for the ofile
	of = kmalloc(sizeof(struct ofile));
	if (of == NULL) {
		// ofile is not allocated
		vfs_close(v);
		return ENOMEM;
	}

	// Initialize a new ofile
	of->lock = lock_create("file lock");
	if (of->lock == NULL) {
		// Ofile lock was not created 
		vfs_close(v);
		kfree(of);
		return ENOMEM;
	}
	of->v = v;
	of->offset = 0;
	of->flags = flags;
	of->ref_cnt = 1;

	// Add ofile to the filetable
	result = filetable_add(of, retfd);
	if (result) {
		// Ofile was not added to the filetable
		lock_destroy(of->lock);
		kfree(of);
		vfs_close(v);
		return result;
	}

	return 0;
}


/* 
 * file_close
 * Called when a process closes a file descriptor.  Think about how you plan
 * to handle fork, and what (if anything) is shared between parent/child after
 * fork.  Your design decisions will affect what you should do for close.
 */
int
file_close(int fd)
{	
	struct ofile *of;	// An ofile
	int result;

	// Find the ofile specified by fd in the filetable
	result = filetable_find(fd, &of);
	if (result) {
		// File was not found
		return result;
	}
	// Lock the ofile
	lock_acquire(of->lock);
	
	// Handle fork cases
	if (of->ref_cnt == 1) {
		/* If ofile has only 1 referencem then close and free it
		 * it from memory */
		vfs_close(of->v);
		lock_release(of->lock);
		lock_destroy(of->lock);
		// Remove ofile from filetable
		curthread->t_filetable->openfiles[fd] = NULL;
	} else if (of->ref_cnt > 1) {
		// File has multiple references don't close it
		of->ref_cnt--;
		lock_release(of->lock);
		return 1;
	}

	return 0;
}

/*** filetable functions ***/

/* 
 * filetable_init
 * pretty straightforward -- allocate the space, set up 
 * first 3 file descriptors for stdin, stdout and stderr,
 * and initialize all other entries to NULL.
 * 
 * Should set curthread->t_filetable to point to the
 * newly-initialized filetable.
 * 
 * Should return non-zero error code on failure.  Currently
 * does nothing but returns success so that loading a user
 * program will succeed even if you haven't written the
 * filetable initialization yet.
 */

int
filetable_init(void)
{
	char std_filename[32];	// A mutable filename for the std fds
	int fd_std;		// File descriptor int for std fds
	int result;
	
	// Initalize the filetable struct
	curthread->t_filetable = kmalloc(sizeof(struct filetable));
	//ft->lock = lock_create("ft_lock");
	if (curthread->t_filetable  == NULL) {
		// Failed to allocate memory for filetable
		return ENOSPC;
	}

	// Initalize all filetable entries to NULL
	for (int i = 0; i < __OPEN_MAX; i++) {
		curthread->t_filetable->openfiles[i] = NULL;
	}

	// Setup and configure the std file descriptors: stdin, stdout, stderr
	strcpy(std_filename, "con:");
	result = file_open(std_filename, O_RDONLY, 0, &fd_std);
	// Check if stdin was opened and added to filetable
	if (result) {
		// Failed to open stdin fd
		return result;
	}	
	strcpy(std_filename, "con:");
	result = file_open(std_filename, O_WRONLY, 0, &fd_std);
	// Check if stdout was opened and added to filetable
	if (result) {
		// Failed to open stdout fd
		return result;
	}
	strcpy(std_filename, "con:");
	result = file_open(std_filename, O_WRONLY, 0, &fd_std);
	// Check if stderr was opened and added to filetable
	if (result) {
		// Failed to open stderr fd
		return result;
	}
	return 0;
}	

/*
 * filetable_destroy
 * closes the files in the file table, frees the table.
 * This should be called as part of cleaning up a process (after kill
 * or exit).
 */
void
filetable_destroy(struct filetable *ft)
{
	// Close all the files in the file table
	for (int i = 0; i < __OPEN_MAX; i++) {
		if (ft->openfiles[i]) {
			file_close(i);
		}
	}
	// Free the filetable from memory
	kfree(ft);
}	


/* 
 * You should add additional filetable utility functions here as needed
 * to support the system calls.  For example, given a file descriptor
 * you will want some sort of lookup function that will check if the fd is 
 * valid and return the associated vnode (and possibly other information like
 * the current file position) associated with that open file.
 */

/*
 * filetable_add
 * Add a ofile at the next avaliable index in the filetable and set the file
 * descriptor to the avaliable index. Return 0 on success.
 */
int filetable_add(struct ofile *of, int *fd) {
	for (int i = 0; i < __OPEN_MAX; i++) {
		if (curthread->t_filetable->openfiles[i] == NULL) {
			curthread->t_filetable->openfiles[i] = of;
			*fd = i;
			return 0;
		}
	}
	// Filetable is full
	return ENOSPC;
}

/*
 * filetable_find
 * Find an ofile from the filetable at a specific index and set the ofile
 * argument to the ofile found at the specific index. Return 0 on success.
 */
int filetable_find(int fd, struct ofile **of) {
	// Check if index is valid
	if (fd < 0 || fd >= __OPEN_MAX) {
		// Invalid filetable index
		return EBADF;
	}
	// Set the argument of to the file found at index of filetable
	*of = curthread->t_filetable->openfiles[fd];
	// Check if ofile is valid
	if (*of == NULL) {
		// Invalid ofile
		return EBADF;
	}
	return 0;	
}

/* END A3 SETUP */
